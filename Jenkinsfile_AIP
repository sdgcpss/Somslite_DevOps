pipeline {
     
  agent {
    kubernetes {
      label 'SpringBootRestApp'
      defaultContainer 'jnlp'
      yaml """
apiVersion: v1
kind: Pod
metadata:
labels:
  component: ci
spec:
  containers:
  - name: imbjava
    image: ibmcom/ibmjava:8-sdk-alpine
    command:
    - cat
    tty: true
"""
}
    }
  
stages {
	stage('Build & Unit Test') {
		steps {
			container('imbjava') {
				withMaven(maven: 'MAVEN-3.6.3') {
					withSonarQubeEnv(installationName: 'Sonarqube') {
						echo 'I am executing unit test'
						// sh 'for i in ESBAuditClient ESBAuditLog ESBErrorTranslator TaxESB FraudESB FulfillmentESB PaymentESB ESBRadial ESBAutomatedQueueRetry AlertESB OrderReconESB;do gradle --no-daemon -p ${i} clean build;done'
						sh 'mvn -f sample-java-app/pom.xml clean package'
					}
				}
			}
		}
	}
	stage('copy_environment_properties'){
			       steps {
			                  container('imbjava') {
			                       /* mkdir properties
                                                 cp -r SterlingESBAux/properties/dev1 properties/
                                                 cp -r SterlingESBAux/properties/uat1 properties/
                                                 cp -r SterlingESBAux/properties/perf1 properties/
                                                 cp -r SterlingESBAux/properties/perf2 properties/
                                                 cp -r SterlingESBAux/properties/prod1 properties/
                                                 cp -r SterlingESBAux/properties/prod2 properties/

                                                  ls -la properties
                                                      */
						   fileOperations([folderCreateOperation('properties')])
						  // fileOperations([fileCopyOperation('dev1properties')])
						  // mkdir properties
						 // cp -r dev1properties/
						 echo 'coping property files '
						 
						 }
				         }
			}
	stage('check sonar plugin'){
			       steps {
			                  container('imbjava') {
			                       /* grep -q "org.sonarqube" build.gradle

                                                if [ $? -gt 0 ]; then
                                                sed -i '' '/register plug-ins/ {a\
                                                plugins {id "org.sonarqube" version "3.0"}
                                                       }' build.gradle
                                                 Fi

                                                      */
						  }
				         }
			}
			post {
            always {
	    archiveArtifacts artifacts: 'dev1properties'
		// javadoc(javadocDir: '/home/jenkins/agent/workspace/DevOps/Somslite/SomsLite CI Pipeline/target/site/apidocs', keepAll: true)
	} 
        failure {
            /*mail bcc: '', 
            	 body: "<b>Example</b><br>\n<br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL de build: ${env.BUILD_URL}", 
            	 cc: '', 
            	 charset: 'UTF-8', 
            	 from: '', 
            	 mimeType: 'text/html', 
            	 replyTo: '', 
            	 subject: "ERROR CI: Project name -> ${env.JOB_NAME}", 
            	 to: "foo@foomail.com";*/
		echo 'I am sending a notification with failure'
        }
	success {
		echo 'I am sending a notification with success'
	}
   }
}
}
